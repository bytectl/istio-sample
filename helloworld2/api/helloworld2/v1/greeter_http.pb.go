// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type Greeter2HTTPServer interface {
	SayHello2(context.Context, *Hello2Request) (*Hello2Reply, error)
}

func RegisterGreeter2HTTPServer(s *http.Server, srv Greeter2HTTPServer) {
	r := s.Route("/")
	r.GET("/helloworld2/{name}", _Greeter2_SayHello20_HTTP_Handler(srv))
}

func _Greeter2_SayHello20_HTTP_Handler(srv Greeter2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Hello2Request
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/helloworld.v1.Greeter2/SayHello2")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello2(ctx, req.(*Hello2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Hello2Reply)
		return ctx.Result(200, reply)
	}
}

type Greeter2HTTPClient interface {
	SayHello2(ctx context.Context, req *Hello2Request, opts ...http.CallOption) (rsp *Hello2Reply, err error)
}

type Greeter2HTTPClientImpl struct {
	cc *http.Client
}

func NewGreeter2HTTPClient(client *http.Client) Greeter2HTTPClient {
	return &Greeter2HTTPClientImpl{client}
}

func (c *Greeter2HTTPClientImpl) SayHello2(ctx context.Context, in *Hello2Request, opts ...http.CallOption) (*Hello2Reply, error) {
	var out Hello2Reply
	pattern := "/helloworld2/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/helloworld.v1.Greeter2/SayHello2"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
